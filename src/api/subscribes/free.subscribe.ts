import { CtxCallbackQuery } from '@/lib/context/types';
import getDataExp from '@/utils/getDataExp';
import { MESSAGE_EFFECTS } from '@effect-ak/tg-bot-client';
import createPayment from 'db/queries/payment/createPayment';
import getPaymentByProvider from 'db/queries/payment/getPaymentByProvider';
import getAvailableServers from 'db/queries/servers/getAvailableServers';
import createSubscribe from 'db/queries/subscribe/createSubscribe';
import { Plan, Utils } from 'types';

export default async (ctx: CtxCallbackQuery, utils: Utils) => {
    const _user = await ctx._user;
    const { execBotMethod } = utils;

    try {
        if (!_user) {
            throw new Error('User not found');
        }

        const existingPayment = await getPaymentByProvider(
            utils,
            'free',
            _user
        );

        if (existingPayment) {
            utils.execBotMethod('send_message', {
                chat_id: ctx.chat_id,
                text: '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫.',
            });
            return;
        }

        const { payment, subscribe } = await utils.db.transaction(
            async (tx) => {
                const payment = await createPayment(
                    { ...utils, db: tx },
                    {
                        owner_id: _user.id,
                        payment_id: 'free',
                        provider: 'free',
                    }
                );

                if (!payment) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂');
                }

                const subscribe = await createSubscribe(
                    { ...utils, db: tx },
                    {
                        owner_id: _user.id,
                        payment_id: payment.id,
                        type_id: 1,
                        closed: false,
                    }
                );

                if (!subscribe) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É');
                }

                return { payment, subscribe };
            }
        );

        await execBotMethod('send_message', {
            chat_id: ctx.chat_id,
            parse_mode: 'MarkdownV2',
            text: `–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ *${getDataExp(
                payment.created_at,
                Plan.FREE
            )}*
            `,
            message_effect_id: MESSAGE_EFFECTS['üéâ'],
        });

        const servers = await getAvailableServers(utils);

        if (!servers) {
            await execBotMethod('send_message', {
                chat_id: ctx.chat_id,
                text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞.',
            });
            return;
        }

        await execBotMethod('send_message', {
            chat_id: ctx.chat_id,
            parse_mode: 'MarkdownV2',
            text: `–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN:`,
            reply_markup: {
                inline_keyboard: servers.map((server) => [
                    {
                        text: server.name,
                        callback_data: `connect_${server.id}`,
                    },
                ]),
            }
        });

        console.log({ payment, subscribe });
    } catch (error) {
        console.log('Error in buyFreeSub:', error);
    }

    // const res = await buyFreeSub(undefined, utils).catch((error) => {
    //     console.log('Error in buyFreeSub:', error);
    //     utils.logger.error('Error in buyFreeSub:', error);
    // });

    // if (_user) {
    //     const payment = await createPayment(utils, {
    //         owner_id: _user.id,
    //         payment_id: 'free',
    //         provider: 'free',
    //     });

    //     if (payment) {
    //         utils.execBotMethod('send_message', {
    //             chat_id: ctx.chat_id,
    //             parse_mode: 'MarkdownV2',
    //             text: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–∏—Ç—å—Å—è *${getDataExp(
    //                 payment.created_at,
    //                 Plan.FREE
    //             )}* `,
    //         });
    //     }
    // } else {
    //     utils.logger.error(
    //         'free.subscribe: –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    //     );
    // }
};
