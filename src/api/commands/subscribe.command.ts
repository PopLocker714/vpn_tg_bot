import getPaymentByProvider from 'db/queries/payment/getPaymentByProvider';
import { Plan, IBaseProps } from 'types';

const buttonsPlan = [
    [
        {
            text: 'üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (250‚ÇΩ)',
            callback_data: Plan.SUBSCRIBE_1,
        },
    ],
    [
        {
            text: 'üí∞üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ 3 –º–µ—Å—è—Ü–∞ (750‚ÇΩ)',
            callback_data: Plan.SUBSCRIBE_2,
        },
    ],
    [
        {
            text: 'üí∞üí∞üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥ (1500‚ÇΩ)',
            callback_data: Plan.SUBSCRIBE_3,
        },
    ],
];

const freeButton = [
    {
        text: 'ü§© –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π',
        callback_data: Plan.FREE,
    },
];

export default async ({ context, utils }: IBaseProps) => {
    const { execBotMethod } = utils;
    const _user = await context._user;

    if (!_user) {
        execBotMethod('send_message', {
            chat_id: context.chat_id,
            text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        });
        return;
    }

    const freePayment = await getPaymentByProvider(utils, 'free', _user);


    execBotMethod('send_message', {
        chat_id: context.chat_id,
        text: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏',
        reply_markup: {
            inline_keyboard: !freePayment
                ? [freeButton, ...buttonsPlan]
                : [...buttonsPlan],
        },
    });
};
